package ca.on.oicr.gsi.vidarr;

import ca.on.oicr.gsi.Pair;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/** A definition for a workflow that is available to the user */
public final class WorkflowDefinition {
  /**
   * Information the caller must provide such that the output from the workflow can be provisioned
   */
  public static final class Output {
    private final String name;
    private final OutputType type;

    /**
     * Create a new output information type
     *
     * @param type the type the caller must provide
     * @param name the name the caller must provide
     */
    public Output(OutputType type, String name) {
      this.type = type;
      this.name = name;
    }

    /** The name the caller must provide for this output parameter */
    public String name() {
      return name;
    }

    /** The type the caller must provide for this output parameter */
    public OutputType type() {
      return type;
    }
  }

  /** A parameter that can be supplied to a workflow. */
  public static final class Parameter {
    private final String name;
    private final InputType type;

    /**
     * Create a new parameter definition
     *
     * @param type the type of the value the caller must supply
     * @param name the name the caller must supply
     */
    public Parameter(InputType type, String name) {
      this.type = type;
      this.name = name;
    }

    /** The name the caller must supply */
    public String name() {
      return name;
    }

    /** The type of the value the caller must supply */
    public InputType type() {
      return type;
    }
  }

  private final Map<String, String> accessoryFiles;
  private final String contents;
  private final String id;
  private final WorkflowLanguage language;
  private final List<Output> outputs;
  private final List<Parameter> parameters;

  /**
   * Create a new workflow that can be executed
   *
   * @param language the language the workflow is written in
   * @param id a unique identifier for the workflow
   * @param contents the actual workflow itself
   * @param accessoryFiles additional files that should be delivered with the workflow
   * @param parameters the information required to run the workflow
   * @param outputs the format of the data generated by the workflow
   */
  public WorkflowDefinition(
      WorkflowLanguage language,
      String id,
      String contents,
      Map<String, String> accessoryFiles,
      Stream<Parameter> parameters,
      Stream<Output> outputs) {
    this.language = language;
    this.id = id;
    this.contents = contents;
    this.accessoryFiles = new TreeMap<>(accessoryFiles);
    this.parameters = parameters.collect(Collectors.toList());
    this.outputs = outputs.collect(Collectors.toList());
  }

  /** Additional files that need to be present when the workflow runs. */
  public Stream<Pair<String, String>> accessoryFiles() {
    return accessoryFiles.entrySet().stream()
        .map(entry -> new Pair<>(entry.getKey(), entry.getValue()));
  }

  /** The body of the workflow */
  public String contents() {
    return contents;
  }

  /** The ID hash of the workflow */
  public String id() {
    return id;
  }

  /** The language the workflow is written in. */
  public WorkflowLanguage language() {
    return language;
  }

  /**
   * The output information that must be provided at the time of execution to provision out from
   * this workflow.
   */
  public Stream<Output> outputs() {
    return outputs.stream();
  }

  /** All parameters this workflow takes */
  public Stream<Parameter> parameters() {
    return parameters.stream();
  }
}
